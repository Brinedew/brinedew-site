# Optional: This tells Decap CMS where your live site will be.
# Useful for features like preview links if your theme/setup supports them.
site_url: https://brinedew.com

backend:
  name: github
  repo: Brinedew/brinedew-site # <<< YOUR NEW REPO NAME
  branch: main # Or your primary working branch
  base_url: https://decap-proxy.decap.workers.dev # <<< YOUR CLOUDFLARE WORKER URL
  auth_endpoint: auth # Default for decap-proxy

media_folder: "docs/assets/images" # Where uploaded images will be stored
public_folder: "/assets/images"   # How they are accessed in Markdown/site

# Authentication - THIS IS THE CRITICAL PART FOR GITHUB PAGES
# Option 1: Using Netlify Identity (recommended by Decap for ease, even on other platforms)
# This involves signing up for a free Netlify account and setting up Netlify Identity for your site.
# You would then add Netlify Identity widget scripts to your admin/index.html
# and configure specific settings here. This is often the smoothest for auth.
# See Decap CMS docs on Netlify Identity.

# Option 2: GitHub OAuth (More complex to set up yourself for GitHub Pages)
# You'd need to register an OAuth App on GitHub and potentially run a small proxy/server.
# base_url: https://your-auth-server.com # if using an external auth server
# auth_endpoint: /auth

# Option 3: A simpler proxy backend (if you can host one, or use a service)
# Some community tools exist for this.

# For now, let's assume you'll explore Netlify Identity as per Decap docs,
# or use a very simple implicit flow if your repo is public and only you edit,
# though implicit flow is less secure and has limitations.
# The Decap CMS documentation is your best friend for current authentication methods.
# For a very basic start to see if it *tries* to connect (won't fully work without proper auth):
# (Remove this if you set up Netlify Identity or another provider)
# publish_mode: editorial_workflow # Optional: for drafts and reviews

collections:
  - name: "pages" # Used to manage your Markdown pages
    label: "Pages"
    folder: "docs" # Where your Markdown files are (excluding index.md if handled separately)
    create: true   # Allow creating new files
    slug: "{{slug}}" # Filename from title
    fields: # Fields for each page
      - {label: "Title", name: "title", widget: "string"}
      - {label: "Body", name: "body", widget: "markdown"}
      # Add more fields if your pages have frontmatter like dates, authors etc.
      # Example:
      # - {label: "Publish Date", name: "date", widget: "datetime"}

# Ensure your mkdocs.yml 'nav' can pick these up, or you structure them
# in subfolders within 'docs' and configure collections accordingly.
# Example for pages in a 'topics' subfolder:
# - name: "topics"
#   label: "Topics"
#   folder: "docs/topics"
#   create: true
#   slug: "{{slug}}"
#   fields:
#     - {label: "Title", name: "title", widget: "string"}
#     - {label: "Body", name: "body", widget: "markdown"}